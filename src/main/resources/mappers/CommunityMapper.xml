<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.platform.learning.reactbootproject.editor.communitymapper.CommunityMapper">
	<insert id="communityInsert">
		insert into community
		values(community_pk_seq.NEXTVAL,#{community_user_pk},#{community_category},#{community_title},#{community_content},
		0,0,0,sysdate)
	</insert>

	<resultMap id="communityWithUserResultMap" type="com.platform.learning.reactbootproject.editor.communitydto.CommunityBBSDTO">
		<result property="community_pk" column="COMMUNITY_PK" />
		<result property="community_user_pk" column="COMMUNITY_USER_PK" />
		<result property="community_category" column="COMMUNITY_CATEGORY" />
		<result property="community_title" column="COMMUNITY_TITLE" />
		<result property="community_content" column="COMMUNITY_CONTENT" />
		<result property="community_view" column="COMMUNITY_VIEW" />
		<result property="community_isgood" column="COMMUNITY_ISGOOD" />
		<result property="community_report" column="COMMUNITY_REPORT" />
		<result property="community_date" column="COMMUNITY_DATE" />
		<result property="community_rn" column="community_rn" />
		<association property="userDTO" resultMap="user" javaType="com.platform.learning.reactbootproject.dy.login.UserDTO">
		</association>
	</resultMap>

	<resultMap type="com.platform.learning.reactbootproject.dy.login.UserDTO" id="user">
		<id property="user_pk" column="USER_PK" />
		<result property="user_nickname" column="USER_NICKNAME" />
		<result property="user_email" column="USER_EMAIL" />
		<result property="user_platform" column="USER_PLATFORM" />
		<result property="user_courses_key" column="USER_COURSES_KEY" />
		<result property="user_isAdmin" column="USER_ISADMIN" />
		<result property="user_profile" column="USER_PROFILE" />
	</resultMap>
	
	<select id="SelectMenuCommunity" resultMap="communityWithUserResultMap">
		SELECT *
FROM (
    SELECT c.*, ROWNUM AS rn
    FROM (
        SELECT 
            c.COMMUNITY_PK,
            c.COMMUNITY_USER_PK,
            c.COMMUNITY_CATEGORY,
            c.COMMUNITY_TITLE,
            c.COMMUNITY_CONTENT,
            c.COMMUNITY_VIEW,
            c.COMMUNITY_ISGOOD,
            c.COMMUNITY_REPORT,
            to_char(c.COMMUNITY_DATE,'yyyy-mm-dd') as COMMUNITY_DATE,
            u.*
        FROM
            COMMUNITY c
        JOIN
            USERS u ON c.COMMUNITY_USER_PK = u.USER_PK
        WHERE
            c.COMMUNITY_REPORT &lt;= 10
            <if test="category != 'home'">
            and c.community_category = #{category}
            </if>
        ORDER BY
            c.COMMUNITY_PK DESC
    ) c
    WHERE ROWNUM &lt;= #{end_row}
) WHERE rn > #{start_row}
	</select>

	<select id="selectMenuCommunityTotalCount">
		SELECT COUNT(*) AS total_count FROM community
		<if test="category !='home'">
			where community_category = #{category}
		</if>
	</select>

	<select id="communitySelectView" resultMap="communityWithUserResultMap">
		SELECT
		c.COMMUNITY_PK,
		c.COMMUNITY_USER_PK,
		c.COMMUNITY_CATEGORY,
		c.COMMUNITY_TITLE,
		c.COMMUNITY_CONTENT,
		c.COMMUNITY_VIEW,
		c.COMMUNITY_ISGOOD,
		c.COMMUNITY_REPORT,
		to_char(c.COMMUNITY_DATE,'yyyy-mm-dd') as COMMUNITY_DATE,
		u.*
		FROM
		COMMUNITY c, USERS u
		WHERE
		c.COMMUNITY_USER_PK = u.USER_PK
		and c.community_pk = #{community_pk}
		ORDER BY
		c.COMMUNITY_PK DESC
	</select>
	
	<update id="updateViews">
		update community set community_view = community_view + 1 where community_pk
		= #{community_pk}
	</update>
	<update id="isGood">
		update community set community_isgood = community_isgood + 1 where
		community_pk = #{community_pk}
	</update>
	<update id="report">
		update community set community_report = community_report+ 1 where
		community_pk = #{community_pk}
	</update>
	<delete id="delete">
		delete community where community_pk = #{community_pk}
	</delete>
	<update id="update">
		update community set community_title = #{community_title},
		community_category = #{community_category}
		, community_content = #{community_content} where community_pk =
		#{community_pk}
	</update>
	
	<resultMap type="com.platform.learning.reactbootproject.dy.login.UserDTO" id="recommentUser">
	    <id property="user_pk" column="recomment_user_pk" />
	    <result property="user_nickname" column="recomment_user_nickname" />
	    <result property="user_email" column="recomment_user_email" />
	    <result property="user_platform" column="recomment_user_platform" />
	    <result property="user_courses_key" column="recomment_user_courses_key" />
	    <result property="user_isAdmin" column="recomment_user_isAdmin" />
	    <result property="user_profile" column="recomment_user_profile" />
	</resultMap>
	
	<resultMap type="com.platform.learning.reactbootproject.editor.communitydto.CommunityReCommentDTO" id="recomment">
	    <id property="community_recomment_pk" column="community_recomment_pk" />
	    <result property="community_recomment_community_comment_pk" column="community_recomment_community_comment_pk" />
	    <result property="community_recomment_user_pk" column="community_recomment_user_pk" />
	    <result property="community_recomment_content" column="community_recomment_content" />
	    <result property="community_recomment_date" column="community_recomment_date" />
	    <association property="userDTO" resultMap="recommentUser" javaType="com.platform.learning.reactbootproject.dy.login.UserDTO" />
	</resultMap>
	
	<resultMap type="com.platform.learning.reactbootproject.dy.login.UserDTO" id="commentUser">
	    <id property="user_pk" column="USER_PK" />
	    <result property="user_nickname" column="USER_NICKNAME" />
	    <result property="user_email" column="USER_EMAIL" />
	    <result property="user_platform" column="USER_PLATFORM" />
	    <result property="user_courses_key" column="USER_COURSES_KEY" />
	    <result property="user_isAdmin" column="USER_ISADMIN" />
	    <result property="user_profile" column="USER_PROFILE" />
	</resultMap>
	
	<resultMap id="commentWithUserResultMap" type="com.platform.learning.reactbootproject.editor.communitydto.CommunityCommentDTO">
	    <result property="community_comment_pk" column="COMMUNITY_COMMENT_PK" />
	    <result property="community_comment_community_pk" column="COMMUNITY_COMMENT_COMMUNITY_PK" />
	    <result property="community_comment_user_pk" column="COMMUNITY_COMMENT_USER_PK" />
	    <result property="community_comment_content" column="COMMUNITY_COMMENT_CONTENT" />
	    <result property="community_comment_date" column="COMMUNITY_COMMENT_DATE" />
	    <association property="userDTO" resultMap="commentUser" javaType="com.platform.learning.reactbootproject.dy.login.UserDTO" />
	    <collection property="recommentList" resultMap="recomment" javaType="List" />
	</resultMap>
	
	<select id="getCommentsByCommunityId" resultMap="commentWithUserResultMap">
	    SELECT
	        cc.COMMUNITY_COMMENT_PK,
	        cc.COMMUNITY_COMMENT_COMMUNITY_PK,
	        cc.COMMUNITY_COMMENT_USER_PK,
	        cc.COMMUNITY_COMMENT_CONTENT,
	        to_char(cc.COMMUNITY_COMMENT_DATE,'yyyy-mm-dd') as COMMUNITY_COMMENT_DATE,
            u.*,
            crc.*,
            ru.user_pk as recomment_user_pk,
            ru.user_nickname as recomment_user_nickname,
            ru.USER_PK as recomment_user_email,
            ru.user_email as recomment_user_platform,
            ru.user_courses_key as recomment_user_courses_key,
            ru.user_isadmin as recomment_user_isadmin,
            ru.user_profile as recomment_user_profile
	    FROM
	        COMMUNITY_COMMENT cc
            left join users u on 
            cc.community_comment_user_pk = u.user_pk
            left JOIN community_recomment crc ON 
            cc.COMMUNITY_COMMENT_pk = crc.community_recomment_community_comment_pk
            left JOIN users ru on
            crc.community_recomment_user_pk = ru.user_pk
	    WHERE
	        cc.COMMUNITY_COMMENT_COMMUNITY_PK = #{community_pk}
	    ORDER BY
	        cc.COMMUNITY_COMMENT_PK , crc.community_recomment_pk
	</select>

	<select id="isGoodCheck">
		select * from community_isgood where community_isgood_community_pk = #{community_isgood_community_pk} 
		and community_isgood_user_pk = #{community_isgood_user_pk}
	</select>
	
	<insert id="isGoodUserInsert">
		INSERT INTO community_isgood (community_isgood_community_pk, community_isgood_user_pk)
		VALUES (#{community_isgood_community_pk}, #{community_isgood_user_pk})
	</insert>
	
	<select id="reportCheck">
		select * from community_report where community_report_community_pk = #{community_report_community_pk} 
		and community_report_user_pk = #{community_report_user_pk}
	</select>
	
	<insert id="reportUserInsert">
		INSERT INTO community_report (community_report_community_pk, community_report_user_pk)
		VALUES (#{community_report_community_pk}, #{community_report_user_pk})
	</insert>
	
	<insert id="insertComment">
		insert into community_comment values(community_comment_seq.nextVal,#{community_comment_user_pk}
		,#{community_comment_community_pk},#{community_comment_content},sysdate,0)
	</insert>
	<update id="updateComment">
		update community_comment set community_comment_content = #{community_comment_content} where community_comment_pk = #{community_comment_pk}
	</update>
	<delete id="deleteComment">
		delete community_comment where community_comment_pk = #{community_comment_pk}
	</delete>
	
	
	<insert id="insertRecomment">
		insert into community_recomment values(community_recomment_seq.nextval,#{community_recomment_user_pk}
		,#{community_recomment_community_comment_pk},#{community_recomment_content},sysdate)
	</insert>
	<update id="updateRecomment">
		update community_recomment set community_recomment_content = #{community_recomment_content} 
		where community_recomment_pk = #{community_recomment_pk}
	</update>
	<delete id="deleteRecomment">
		delete community_recomment where community_recomment_pk = #{community_recomment_pk}
	</delete>
</mapper>

